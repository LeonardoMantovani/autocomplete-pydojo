[
	{
		"text": "RED",
		"description": "The Red Color",
		"type": "value"
	},
	{
		"text": "GREEN",
		"description": "The Green Color",
		"type": "value"
	},
	{
		"text": "BLUE",
		"description": "The Blue Color",
		"type": "value"
	},
	{
		"text": "YELLOW",
		"description": "The Yellow Color",
		"type": "value"
	},
	{
		"text": "BLACK",
		"description": "The Black Color",
		"type": "value"
	},
	{
		"text": "WHITE",
		"description": "The White Color",
		"type": "value"
	},
	{
		"text": "CYAN",
		"description": "The Cyan Color",
		"type": "value"
	},
	{
		"text": "MAGENTA",
		"description": "The Magenta Color",
		"type": "value"
	},
	{
		"text": "PINK",
		"description": "The Pink Color",
		"type": "value"
	},
	{
		"text": "TURQUOISE",
		"description": "The Turquoise Color",
		"type": "value"
	},
	{
		"text": "ORANGE",
		"description": "The Orange Color",
		"type": "value"
	},
	{
		"text": "SILVER",
		"description": "The Silver Color",
		"type": "value"
	},
	{
		"text": "GREY",
		"description": "The Grey Color",
		"type": "value"
	},
	{
		"text": "VIOLET",
		"description": "The Violet Color",
		"type": "value"
	},
	{
		"text": "PURPLE",
		"description": "The Purple Color",
		"type": "value"
	},
	{
		"text": "TOMATO",
		"description": "The Tomato's Color",
		"type": "value"
	},
	{
		"text": "BEIGE",
		"description": "The Beige Color",
		"type": "value"
	},
	{
		"text": "LAVENDER",
		"description": "The Lavender Color",
		"type": "value"
	},

	{
		"text": "COLLISION",
		"description": "The Collision Result",
		"type": "value"
	},

	{
		"text": "GameInfo",
		"description": "Class for Game Info",
		"type": "class"
	},
	{
		"text": "game_info",
		"description": "Call the GameInfo class",
		"type": "value"
	},

	{
		"text": "framerate",
		"description": "Set the framerate for your game",
		"type": "function"
	},

	{
		"text": "EventsStorage",
		"description": "Class for storaged events",
		"type": "class"
	},
	{
		"text": "event_storage",
		"description": "Call the EventsStorage class",
		"type": "function"
	},

	{
		"text": "MouseState",
		"description": "Class for Mouse State",
		"type": "class"
	},
	{
		"text": "hide",
		"description": "Hide the Mouse cursor",
		"type": "function"
	},
	{
		"text": "show",
		"description": "Show the Mouse cursor",
		"type": "function"
	},
	{
		"text": "update_events",
		"description": "Update Mouse state",
		"type": "function"
	},
	{
		"text": "MOUSE",
		"description": "Call the MouseState class",
		"type": "value"
	},

	{
		"text": "ScreenInfo",
		"description": "Class for the Screen Info",
		"type": "class"
	},
	{
		"text": "screen_info",
		"description": "Call the ScreenInfo class",
		"type": "value"
	},

	{
		"text": "ActorsInfo",
		"description": "Class for the Actor Info",
		"type": "class"
	},
	{
		"text": "actors_info",
		"description": "Call the ActorsInfo class",
		"type": "value"
	},

	{
		"text": "CENTER",
		"description": "Screen Center",
		"type": "value"
	},

	{
		"text": "ColorsInfo",
		"description": "Class for the Colors Info",
		"type": "class"
	},
	{
		"text": "colors_info",
		"description": "Call the ColorsInfo class",
		"type": "value"
	},

	{
		"text": "colorscale",
		"description": "Function for Colors' Scale",
		"type": "function"
	},

	{
		"text": "screen",
		"description": "Game's Window || (width, height, fulscreen=True/False)",
		"type": "function"
	},

	{
		"text": "fill",
		"description": "Fill the screen with a color",
		"type": "function"
	},

	{
		"text": "clear",
		"description": "Clear the pen surface",
		"type": "function"
	},

	{
		"text": "find_file_name",
		"description": "Find the name of a file || (path)",
		"type": "function"
	},

	{
		"text": "background",
		"description": "Use an image for game's background || (path)",
		"type": "function"
	},
	{
		"text": "loadbackground",
		"description": "Load another background for the game || (path)",
		"type": "function"
	},
	{
		"text": "setbackground",
		"description": "Select which background use || (name)",
		"type": "function"
	},

	{
		"text": "default_clock",
		"description": "The Default Clock",
		"type": "value"
	},

	{
		"text": "process_gliding",
		"description": "Gliding Process",
		"type": "function"
	},

	{
		"text": "ACTORS",
		"description": "Actors group",
		"type": "value"
	},

	{
		"text": "Clock",
		"description": "The Game's Clock",
		"type": "function"
	},

	{
		"text": "wait",
		"description": "Stop the game for some ms || (ms)",
		"type": "function"
	},

	{
		"text": "ticks",
		"description": "The Game's Ticks",
		"type": "function"
	},

	{
		"text": "clone",
		"description": "Clone an existing Actor || (target)",
		"type": "function"
	},

	{
		"text": "distance",
		"description": "Return the distance between a and b || (a, b)",
		"type": "function"
	},

	{
		"text": "getactors",
		"description": "Return all actors with a tag || (tag)",
		"type": "function"
	},

	{
		"text": "write",
		"description": "Write some text || (string, position, name, fontsize, bold=True/False, italic=True/False, color)",
		"type": "function"
	},

	{
		"text": "Camera",
		"description": "The Game's Camera",
		"type": "class"
	},
	{
		"text": "scroll_x",
		"description": "Move Camera on x || (target)",
		"type": "function"
	},
	{
		"text": "scroll_y",
		"description": "Move Camera on y || (target)",
		"type": "function"
	},
	{
		"text": "follow",
		"description": "Say to the camera to follow a target || (target, ground)",
		"type": "function"
	},

	{
		"text": "CAMERA",
		"description": "A Camera object",
		"type": "value"
	},

	{
		"text": "Timer",
		"description": "A Timer || (ms)",
		"type": "class"
	},
	{
		"text": "get",
		"description": "Get the timer value",
		"type": "function"
	},

	{
		"text": "spawned_actor",
		"description": "Group of spawned actors",
		"type": "value"
	},

	{
		"text": "spawn",
		"description": "Spawn an Actor || (actor, speed, direction, position, target, setup_behavior, update_behavior, autoshow=True/False)",
		"type": "function"
	},

	{
		"text": "tagcollide",
		"description": "Return True if 2 actors of these tags collide || (tag1, tag2)",
		"type": "function"
	},

	{
		"text": "execute",
		"description": "Run a program on a path || (path)",
		"type": "function"
	},

	{
		"text": "fullscreen",
		"description": "Set Fullscreen mode",
		"type": "function"
	},

	{
		"text": "save",
		"description": "Save some values locally with a tag || (data, tag)",
		"type": "function"
	},

	{
		"text": "load",
		"description": "Load some saved values using their tag || (tag)",
		"type": "function"
	},

	{
		"text": "terminate",
		"description": "Stop and quit the game",
		"type": "function"
	},

	{
		"text": "update",
		"description": "Update the game window, it's required in While True loop of every game",
		"type": "function"
	},

	{
		"text": "check_collisions",
		"description": "Check collisions at the moment",
		"type": "function"
	},

	{
		"text": "find",
		"description": "Find actors using their class || (actor_class)",
		"type": "function"
	},

	{
		"text": "Actor",
		"description": "Create an Actor with a sprite [in path] and a costume's name [cosname] || (path, cosname)",
		"type": "class"
	},

	{
		"text": "loadcostume",
		"description": "Load another costume for the actor || (path, cosname)",
		"type": "function"
	},

	{
		"text": "setcostume",
		"description": "Set a new costume for the actor [between costumes loaded] || (newcostume)",
		"type": "function"
	},
	{
		"text": "getcostume",
		"description": "Return the actual actor's costume)",
		"type": "function"
	},
	{
		"text": "nextcostume",
		"description": "Switch to second cosume in after a pause|| (pause)",
		"type": "function"
	},
	{
		"text": "slidecostume",
		"description": "Slide costumes with a pause || (first, last, pause, interval)",
		"type": "function"
	},

	{
		"text": "play",
		"description": "Play the Actor Animation || (animation, fps, loop, interval)",
		"type": "function"
	},

	{
		"text": "setx",
		"description": "Set Actor's X || (x)",
		"type": "function"
	},
	{
		"text": "sety",
		"description": "Set Actor's Y || (y)",
		"type": "function"
	},
	{
		"text": "changex",
		"description": "Change Actor's X of delta value || (delta_x)",
		"type": "function"
	},
	{
		"text": "changey",
		"description": "Change Actor's Y of a delta value || (delta_y)",
		"type": "function"
	},
	{
		"text": "getposition",
		"description": "Return Actor's position",
		"type": "function"
	},
	{
		"text": "getx",
		"description": "Return Actor's X",
		"type": "function"
	},
	{
		"text": "gety",
		"description": "Return Actor's Y",
		"type": "function"
	},

	{
		"text": "setdirection",
		"description": "Set Actor's direction with an angle || (angle)",
		"type": "function"
	},
	{
		"text": "getdirection",
		"description": "Return Actor's direction",
		"type": "function"
	},

	{
		"text": "goto",
		"description": "Go to a secific position || (x, y)",
		"type": "function"
	},
	{
		"text": "glide",
		"description": "Glide to a specific position with a speed || (x, y, speed)",
		"type": "function"
	},
	{
		"text": "gorand",
		"description": "Go to a random position in a range || (rangex, rangey)",
		"type": "function"
	},

	{
		"text": "pendown",
		"description": "Use the Actor's Pen",
		"type": "function"
	},
	{
		"text": "penup",
		"description": "Don't use the Actor's Pen",
		"type": "function"
	},
	{
		"text": "setpensize",
		"description": "Set the size of Actor's Pen || (size)",
		"type": "function"
	},
	{
		"text": "setpencolor",
		"description": "Set the color of Actor's Pen || (color)",
		"type": "function"
	},
	{
		"text": "changepencolor",
		"description": "Change the color of Actor's Pen || (interval)",
		"type": "function"
	},

	{
		"text": "bounce",
		"description": "Bounce if you hurt a margin",
		"type": "function"
	},

	{
		"text": "forward",
		"description": "Do some steps forward || (steps)",
		"type": "function"
	},
	{
		"text": "backward",
		"description": "Do some steps backward || (steps)",
		"type": "function"
	},

	{
		"text": "jump",
		"description": "Jump at an height with some steps and in some jumps || (height, step, jumps)",
		"type": "function"
	},

	{
		"text": "right",
		"description": "Turn Right of an Angle || (angle)",
		"type": "function"
	},
	{
		"text": "left",
		"description": "Turn Left od an Angle || (angle)",
		"type": "function"
	},

	{
		"text": "rotate",
		"description": "Set the rotation style [360/flip/none]|| (style)",
		"type": "function"
	},

	{
		"text": "point",
		"description": "Point a target || (target)",
		"type": "function"
	},

	{
		"text": "scale",
		"description": "Scale Actor's Sprite of a value || (value)",
		"type": "function"
	},

	{
		"text": "tag",
		"description": "Add a tag for an Actor || (tag)",
		"type": "function"
	},
	{
		"text": "untag",
		"description": "Remove a tag for an Actor || (tag)",
		"type": "function"
	},

	{
		"text": "click",
		"description": "Return True if the Actor was LeftClicked",
		"type": "function"
	},
	{
		"text": "centralclick",
		"description": "Return True if the Actor was CentralClicked",
		"type": "function"
	},
	{
		"text": "rightclick",
		"description": "Return True if the Actor was RightClicked",
		"type": "function"
	},

	{
		"text": "collide",
		"description": "Return True if the actor collide with a target || (target)",
		"type": "function"
	},

	{
		"text": "hide",
		"description": "Hide the Actor",
		"type": "function"
	},
	{
		"text": "show",
		"description": "Show the Actor",
		"type": "function"
	},
	{
		"text": "kill",
		"description": "Delete the Actor",
		"type": "function"
	},

	{
		"text": "DACANCELLAREEE",
		"description": "Serve per non aggiungere e togliere la virgola ogni volta",
		"type": "value"
	}
]
